{"version":3,"sources":["Context.js","config.js","Components/Nav.js","Components/SearchButton.js","Components/Search.js","Components/NotFound.js","Components/Photo.js","Components/http404.js","App.js","reportWebVitals.js","index.js"],"names":["Context","React","createContext","Provider","Consumer","apiKey","Nav","performSearch","className","onClick","to","SearchButton","type","fill","height","viewBox","width","xmlns","d","Search","handlePopState","e","preventDefault","query","props","match","params","value","window","onpopstate","Fragment","onSubmit","search","path","history","push","currentTarget","reset","name","placeholder","ref","input","required","Component","NotFound","Photo","images","message","photos","isLoading","length","map","photo","src","server","id","secret","alt","title","component","httpError","App","state","axios","get","then","response","setState","data","this","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.6a6758c2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Context = React.createContext();\n\nexport const Provider = Context.Provider;\nexport const Consumer = Context.Consumer;\n","const apiKey = \"c46c241a137672bc3ff5dd161eadb969\";\nexport default apiKey;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Consumer } from \"../Context\";\n\nconst Nav = () => {\n  return (\n    <Consumer>\n      {({ performSearch }) => {\n        return (\n          <nav className=\"main-nav\">\n            <ul>\n              {/* On each <li> element, an onClick event handler is attached. \n              Once clicked, it calls the performSearch function which passes data \n              to display the images. */}\n              <li onClick={() => performSearch(\"sunset\")}>\n                <NavLink to=\"/search/sunset\">Sunset</NavLink>\n              </li>\n              <li onClick={() => performSearch(\"beach\")}>\n                <NavLink to=\"/search/beach\">Beach</NavLink>\n              </li>\n              <li onClick={() => performSearch(\"food\")}>\n                <NavLink to=\"/search/food\">Food</NavLink>\n              </li>\n              <li onClick={() => performSearch(\"nature\")}>\n                <NavLink to=\"/search/nature\">Nature</NavLink>\n              </li>\n              <li onClick={() => performSearch(\"landscape\")}>\n                <NavLink to=\"/search/landscape\">Landscape</NavLink>\n              </li>\n            </ul>\n          </nav>\n        );\n      }}\n    </Consumer>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\n\n/**\n * Renders the button element for the search bar located in Search.js.\n */\n\nconst SearchButton = () => {\n  return (\n    <button type=\"submit\" className=\"search-button\">\n      <svg\n        fill=\"#fff\"\n        height=\"24\"\n        viewBox=\"0 0 23 23\"\n        width=\"24\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\" />\n        <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n      </svg>\n    </button>\n  );\n};\n\nexport default SearchButton;\n","import React, { Component } from \"react\";\nimport { Consumer } from \"../Context\";\n\n//Components\nimport Nav from \"./Nav\";\nimport SearchButton from \"./SearchButton\";\n\nclass Search extends Component {\n  render() {\n    return (\n      <Consumer>\n        {({ performSearch }) => {\n          /**\n           * Executes the window's onpopstate event handler and calls the handlePopState function.\n           */\n\n          function componentDidMount() {\n            window.onpopstate = handlePopState;\n          }\n\n          /**\n           * Once called, handlePopState executes the performSearch function and takes on the history object's parameter value as the value or keyword to retrieve the images to be displayed.\n           * @param {*} e - the event that takes place when the onpopstate event handler is executed.\n           */\n\n          const handlePopState = (e) => {\n            e.preventDefault();\n            const query = this.props.match.params.value;\n            performSearch(query);\n          };\n\n          /**\n           * Callback function that is executed only when the form's onSubmit event handler is called. Pushes the created path to the history object and calls performSearch function to initiate the search and eventually display the images.\n           * @param {*} e - the event that takes place when the onpopstate event handler is executed.\n           */\n\n          const handleSubmit = (e) => {\n            e.preventDefault();\n            const query = this.search.value;\n            const path = `/search/${query}`;\n            this.props.history.push(path);\n            performSearch(query);\n            e.currentTarget.reset();\n          };\n\n          componentDidMount();\n\n          // Returns the JSX of the Search and Nav form.\n          return (\n            <React.Fragment>\n              <form className=\"search-form\" onSubmit={handleSubmit}>\n                <input\n                  type=\"search\"\n                  name=\"search\"\n                  placeholder=\"Search for a photo...\"\n                  ref={(input) => (this.search = input)}\n                  required\n                />\n                <SearchButton />\n              </form>\n              <Nav />\n            </React.Fragment>\n          );\n        }}\n      </Consumer>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\n\n/**\n * Renders the NotFound component on the Photo component. The purpose of this component is to show the user that his/her search has no results.\n */\n\nconst NotFound = () => {\n  return (\n    <div className=\"not-found\">\n      <h3>No Results Found</h3>\n      <p>You search did not return any results. Please try again.</p>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Consumer } from \"../Context\";\n\n//Components\nimport Search from \"./Search\";\nimport NotFound from \"./NotFound\";\n\nconst Photo = ({ match }) => {\n  return (\n    <Consumer>\n      {({ photos, isLoading }) => {\n        let images;\n        let message;\n\n        // Where the images and message variables are determined if they will either provide data to the form or would render the NotFound component and display null.\n        if (photos.length > 0) {\n          // If the photos state (retrieved from App.js through the Consumer) is greater than 0 - meaning there is at least 1 object in the array, then we would return the message and images variables with the populated data from the photos state.\n          const query = match.params.value;\n          message = `${query} photos`;\n          images = photos.map((photo) => (\n            <li className=\"img\" key={photo.id}>\n              <img\n                src={`https://live.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`}\n                alt={photo.title}\n              />\n            </li>\n          ));\n        } else {\n          // If the photos state does not contain any object, then we will return the NotFound component as well as a null value for the images variable.\n          message = <NotFound />;\n          images = null;\n        }\n\n        //Returns the JSX of the the Photo component.\n        return (\n          <React.Fragment>\n            <Route path=\"/search/:value\" component={Search} />\n            <div className=\"photo-container\">\n              <h2>{isLoading ? \"Loading...\" : message}</h2>\n              <ul>{images}</ul>\n            </div>\n          </React.Fragment>\n        );\n      }}\n    </Consumer>\n  );\n};\n\nexport default Photo;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * Rendered to the screen if the URL path does not exist causing a 404 or not-found error. Executed and Accessed by Switch and Route in App.js.\n */\n\nconst httpError = () => {\n  return (\n    <div className=\"errorContainer\">\n      <h1 className=\"error404\">404</h1>\n      <span className=\"errorText\">\n        Don't worry! You didn't break anything. We just can't find what you're\n        looking for.\n      </span>\n      <Link to=\"/\">\n        <button className=\"errorButton\">SEARCH</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default httpError;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { Provider } from \"./Context\";\nimport axios from \"axios\";\nimport apiKey from \"./config\";\n\n//Components\nimport Search from \"./Components/Search\";\nimport Photo from \"./Components/Photo\";\nimport httpError from \"./Components/http404\";\n\nclass App extends Component {\n  state = {\n    photos: [],\n    isLoading: true,\n  };\n\n  /**\n   * Retrieves data from the flickr API and sets the states accordinly.\n   * @param {*} query - The keyword or value that defines the images to be displayed on the screen.\n   */\n\n  performSearch = (query) => {\n    axios\n      .get(\n        `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`\n      )\n      .then((response) =>\n        this.setState({\n          photos: response.data.photos.photo,\n          isLoading: false,\n        })\n      );\n  };\n\n  render() {\n    return (\n      <Provider\n        value={{\n          performSearch: this.performSearch,\n          photos: this.state.photos,\n          isLoading: this.state.isLoading,\n        }}\n      >\n        <BrowserRouter basename=\"/react-photo-gallery\">\n          <Switch>\n            <Route exact path=\"/\" component={Search} />\n            <Route exact path=\"/search/:value\" component={Photo} />\n            <Route component={httpError} />\n          </Switch>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.querySelector(\".container\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}